{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/nhungbui/Desktop/first-project/lib/actions/cart.actions.ts"],"sourcesContent":["'use server';\n\nimport { cookies } from 'next/headers';\nimport { revalidatePath } from 'next/cache';\nimport { z } from 'zod';\nimport { formatError, round2 } from '../utils';\nimport { cartItemSchema, insertCartSchema } from '../validators';\nimport { prisma } from '@/db/prisma';\nimport { CartItem } from '@/types';\nimport { convertToPlainObject } from '../utils';\nimport { Prisma } from '@prisma/client';\n\nimport { Prisma, PrismaClient, InputJsonValue } from '@prisma/client';\n\nexport const addItemToCart = async (\n      data: z.infer<typeof cartItemSchema>,\n): Promise<{ success: boolean; message: string }> => {\n      try {\n            // Check for session cart cookie\n            const sessionCartId = (await cookies()).get('sessionCartId')?.value;\n            if (!sessionCartId) throw new Error('Cart Session not found');\n            // Get cart from database (if exists)\n            const cart = await getMyCart();\n            // Parse and validate submitted item data\n            const item = cartItemSchema.parse(data);\n            // Find product in database\n            const product = await prisma.product.findFirst({\n                  where: { id: item.productId },\n            });\n            if (!product) throw new Error('Product not found');\n            if (!cart) {\n                  // Create new cart object\n                  const newCart = insertCartSchema.parse({\n                  //   userId: userId,\n                    items: [item],\n                    sessionCartId: sessionCartId,\n                    ...calcPrice([item]),\n                  });\n                  // Add to database\n                  await prisma.cart.create({\n                    data: newCart,\n                  });\n                \n                  // Revalidate product page\n                  revalidatePath(`/product/${product.slug}`);\n                \n                  return {\n                    success: true,\n                    message: 'Item added to cart successfully',\n                  };\n                }else {\n                  // Check for existing item in cart\n  const existItem = (cart.items as CartItem[]).find(\n      (x) => x.productId === item.productId\n    );\n    // If not enough stock, throw error\n    if (existItem) {\n      if (product.stock < existItem.qty + 1) {\n        throw new Error('Not enough stock');\n      }\n  \n      // Increase quantity of existing item\n      (cart.items as CartItem[]).find(\n        (x) => x.productId === item.productId\n      )!.qty = existItem.qty + 1;\n    } else {\n      // If stock, add item to cart\n      if (product.stock < 1) throw new Error('Not enough stock');\n      cart.items.push(item);\n    }\n  \n    // Save to database\n    await prisma.cart.update({\n      where: { id: cart.id },\n      data: {\n        items: cart.items as InputJsonValue[],\n        ...calcPrice(cart.items as z.infer<typeof cartItemSchema>[]),\n      },\n    });\n  \n    revalidatePath(`/product/${product.slug}`);\n  \n    return {\n      success: true,\n      message: `${product.name} ${\n        existItem ? 'updated in' : 'added to'\n      } cart successfully`,\n    };\n                }\n\n            // Testing\n            console.log({\n                  'Session Cart ID': sessionCartId,\n                  'Item Requested': item,\n                  'Product Found': product,\n                  cart: cart,\n            });\n\n            return {\n                  success: true,\n                  message: 'Testing Cart',\n            };\n      } catch (error) {\n            return { success: false, message: formatError(error) };\n      }\n};\n\n//  Get user cart from database\nexport async function getMyCart() {\n      // Check for session cart cookie\n      const sessionCartId = (await cookies()).get('sessionCartId')?.value;\n      if (!sessionCartId) return undefined;\n\n      // Get user cart from database\n      const cart = await prisma.cart.findFirst({\n            where: { sessionCartId },\n      });\n\n      if (!cart) return undefined;\n\n      // Convert Decimal values to strings for compatibility with AddToCart component\n      return convertToPlainObject({\n            ...cart,\n            items: cart.items as CartItem[],\n            itemsPrice: cart.itemsPrice.toString(),\n            totalPrice: cart.totalPrice.toString(),\n            shippingPrice: cart.shippingPrice.toString(),\n            taxPrice: cart.taxPrice.toString(),\n      });\n}\n\nconst calcPrice = (items: z.infer<typeof cartItemSchema>[]) => {\n      const itemsPrice = round2(\n          items.reduce((acc, item) => acc + Number(item.price) * item.qty, 0)\n        ),\n        shippingPrice = round2(itemsPrice > 100 ? 0 : 10),\n        taxPrice = round2(0.15 * itemsPrice),\n        totalPrice = round2(itemsPrice + shippingPrice + taxPrice);\n      return {\n        itemsPrice: itemsPrice.toFixed(2),\n        shippingPrice: shippingPrice.toFixed(2),\n        taxPrice: taxPrice.toFixed(2),\n        totalPrice: totalPrice.toFixed(2),\n      };\n    };"],"names":[],"mappings":";;;;;;;IAca,gBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":["file:///Users/nhungbui/Desktop/first-project/components/shared/product/add-to-cart.tsx"],"sourcesContent":["'use client';\n\nimport { CartItem } from '@/types';\nimport { toast } from \"sonner\";\nimport { Button } from '@/components/ui/button';\nimport { Plus } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { addItemToCart } from '@/lib/actions/cart.actions';\n\nconst AddToCart = ({ item }: { item: Omit<CartItem, 'cartId'> }) => {\n      const router = useRouter();\n      const handleAddToCart = async () => {\n            const res = await addItemToCart(item);\n            if (!res.success) {\n              toast.error(res.message || \"Something went wrong!!!!\");\n              return;\n            }\n            toast(`${item.name} added to the cart`, {\n              action: {\n                label: 'Go to cart',\n                onClick: () => router.push('/cart'),\n              },\n            });\n          };\n\n//   return <Button className='w-full' type='button' onClick={handleAddToCart}>\n//   <Plus />\n//   Add to cart\n// </Button>\nreturn <div className='text-sm text-primary cursor-pointer' onClick={handleAddToCart}>Add to cart</div>\n};\n\nexport default AddToCart;"],"names":[],"mappings":";;;;;AAGA;AAGA;AACA;;;AAPA;;;;AASA,MAAM,YAAY;QAAC,EAAE,IAAI,EAAsC;;IACzD,MAAM,SAAS,IAAA,kJAAS;IACxB,MAAM,kBAAkB;QAClB,MAAM,MAAM,MAAM,IAAA,0KAAa,EAAC;QAChC,IAAI,CAAC,IAAI,OAAO,EAAE;YAChB,oJAAK,CAAC,KAAK,CAAC,IAAI,OAAO,IAAI;YAC3B;QACF;QACA,IAAA,oJAAK,EAAC,AAAC,GAAY,OAAV,KAAK,IAAI,EAAC,uBAAqB;YACtC,QAAQ;gBACN,OAAO;gBACP,SAAS,IAAM,OAAO,IAAI,CAAC;YAC7B;QACF;IACF;IAEV,+EAA+E;IAC/E,aAAa;IACb,gBAAgB;IAChB,YAAY;IACZ,qBAAO,6LAAC;QAAI,WAAU;QAAsC,SAAS;kBAAiB;;;;;;AACtF;GArBM;;QACe,kJAAS;;;KADxB;uCAuBS","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/nhungbui/Desktop/first-project/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/nhungbui/Desktop/first-project/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// eslint-disable-next-line import/no-extraneous-dependencies\nexport { createServerReference } from 'react-server-dom-webpack/client'\n"],"names":["callServer","createServerReference","findSourceMapURL"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;;;;;;;;;;;;;;;;IAEjBA,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IAMVC,qBAAqB,EAAA;eAArBA,QAAAA,qBAAqB;;IALrBC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;wBAKK","ignoreList":[0],"debugId":null}}]
}