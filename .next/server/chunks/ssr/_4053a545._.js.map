{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/nhungbui/Desktop/first-project/lib/actions/cart.actions.ts"],"sourcesContent":["'use server';\n\nimport { cookies } from 'next/headers';\nimport { revalidatePath } from 'next/cache';\nimport { z } from 'zod';\nimport { formatError, round2 } from '../utils';\nimport { addToCartInputSchema, cartItemSchema, insertCartSchema } from '../validators';\nimport { prisma } from '@/db/prisma';\nimport { CartItem } from '@/types';\nimport { convertToPlainObject } from '../utils';\nimport { Prisma, PrismaClient } from '@prisma/client';\n\nexport const addItemToCart = async (\n      data: z.infer<typeof addToCartInputSchema>,\n): Promise<{ success: boolean; message: string }> => {\n      try {\n            // Check for session cart cookie\n            const sessionCartId = (await cookies()).get('sessionCartId')?.value;\n            if (!sessionCartId) throw new Error('Cart Session not found');\n            // Get cart from database (if exists)\n            const cart = await getMyCart();\n            // Accept loose input, find product by id or slug, then build canonical item\n            const parsedInput = addToCartInputSchema.parse(data);\n            const product = await prisma.product.findFirst({\n                  where: parsedInput.productId\n                        ? { id: parsedInput.productId }\n                        : { slug: parsedInput.slug as string },\n            });\n            if (!product) throw new Error('Product not found');\n            const canonicalItem = cartItemSchema.parse({\n                  productId: product.id,\n                  name: product.name,\n                  slug: product.slug,\n                  image: product.images[0],\n                  price: Number(product.price),\n                  qty: parsedInput.qty ?? 1,\n            });\n            if (!cart) {\n                  // Create new cart object\n                  const newCart = insertCartSchema.parse({\n                        //   userId: userId,\n                        items: [canonicalItem],\n                        sessionCartId: sessionCartId,\n                        ...calcPrice([canonicalItem]),\n                  });\n                  // Add to database\n                  await prisma.cart.create({\n                        data: newCart,\n                  });\n\n                  // Revalidate product page\n                  revalidatePath(`/product/${product.slug}`);\n\n                  return {\n                        success: true,\n                        message: 'Item added to cart successfully',\n                  };\n            } else {\n                  // Check for existing item in cart\n                  const existItem = (cart.items as CartItem[]).find(\n                        (x) => x.productId === canonicalItem.productId\n                  );\n                  // If not enough stock, throw error\n                  if (existItem) {\n                        if (product.stock < existItem.qty + 1) {\n                              throw new Error('Not enough stock');\n                        }\n\n                        // Increase quantity of existing item\n                        (cart.items as CartItem[]).find(\n                              (x) => x.productId === canonicalItem.productId\n                        )!.qty = existItem.qty + 1;\n                  } else {\n                        // If stock, add item to cart\n                        if (product.stock < 1) throw new Error('Not enough stock');\n                        cart.items.push(canonicalItem);\n                  }\n\n                  // Save to database\n                  await prisma.cart.update({\n                        where: { id: cart.id },\n                        data: {\n                              items: cart.items,\n                              ...calcPrice(cart.items as CartItem[]),\n                        },\n                  });\n\n                  revalidatePath(`/product/${product.slug}`);\n\n                  return {\n                        success: true,\n                        message: `${product.name} ${existItem ? 'updated in' : 'added to'\n                              } cart successfully`,\n                  };\n            }\n\n      } catch (error) {\n            console.log(\"error\",error)\n            return { success: false, message: formatError(error) };\n      }\n};\n\n//  Get user cart from database\nexport async function getMyCart() {\n      // Check for session cart cookie\n      const sessionCartId = (await cookies()).get('sessionCartId')?.value;\n      if (!sessionCartId) return undefined;\n\n      // Get user cart from database\n      const cart = await prisma.cart.findFirst({\n            where: { sessionCartId },\n      });\n\n      if (!cart) return undefined;\n\n      // Convert Decimal values to strings for compatibility with AddToCart component\n      return convertToPlainObject({\n            ...cart,\n            items: cart.items as CartItem[],\n            itemsPrice: cart.itemsPrice.toString(),\n            totalPrice: cart.totalPrice.toString(),\n            shippingPrice: cart.shippingPrice.toString(),\n            taxPrice: cart.taxPrice.toString(),\n      });\n}\n\nconst calcPrice = (items: z.infer<typeof cartItemSchema>[]) => {\n      const itemsPrice = round2(\n            items.reduce((acc, item) => acc + Number(item.price) * item.qty, 0)\n      ),\n            shippingPrice = round2(itemsPrice > 100 ? 0 : 10),\n            taxPrice = round2(0.15 * itemsPrice),\n            totalPrice = round2(itemsPrice + shippingPrice + taxPrice);\n      return {\n            itemsPrice: itemsPrice.toFixed(2),\n            shippingPrice: shippingPrice.toFixed(2),\n            taxPrice: taxPrice.toFixed(2),\n            totalPrice: totalPrice.toFixed(2),\n      };\n};\n\nexport async function removeItemFromCart(productId: string) {\n      try {\n            // Get session cart id\n            const sessionCartId = (await cookies()).get('sessionCartId')?.value;\n            if (!sessionCartId) throw new Error('Cart Session not found');\n\n            // Get product\n            const product = await prisma.product.findFirst({\n                  where: { id: productId },\n            });\n            if (!product) throw new Error('Product not found');\n\n            // Get user cart\n            const cart = await getMyCart();\n            if (!cart) throw new Error('Cart not found');\n\n            // Check if cart has item\n            const exist = (cart.items as CartItem[]).find(\n                  (x) => x.productId === productId\n            );\n            if (!exist) throw new Error('Item not found');\n\n            // Check if cart has only one item\n            if (exist.qty === 1) {\n                  // Remove item from cart\n                  cart.items = (cart.items as CartItem[]).filter(\n                        (x) => x.productId !== exist.productId\n                  );\n            } else {\n                  // Decrease quantity of existing item\n                  (cart.items as CartItem[]).find((x) => x.productId === productId)!.qty =\n                        exist.qty - 1;\n            }\n\n            // Update cart in database\n            await prisma.cart.update({\n                  where: { id: cart.id },\n                  data: {\n                        items: cart.items,\n                        ...calcPrice(cart.items as CartItem[]),\n                  },\n            });\n\n            // Revalidate product page\n            revalidatePath(`/product/${product.slug}`);\n\n            return {\n                  success: true,\n                  message: `${product.name}  ${(cart.items as CartItem[]).find((x) => x.productId === productId)\n                              ? 'updated in'\n                              : 'removed from'\n                        } cart successfully`,\n            };\n      } catch (error) {\n            return { success: false, message: formatError(error) };\n      }\n};"],"names":[],"mappings":";;;;;;;IAYa,gBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["file:///Users/nhungbui/Desktop/first-project/components/shared/product/add-to-cart.tsx"],"sourcesContent":["'use client';\n\nimport { CartItem } from '@/types';\nimport { toast } from \"sonner\";\nimport { Button } from '@/components/ui/button';\nimport { useRouter } from 'next/navigation';\nimport { useTransition } from 'react';\nimport { Plus, Minus, Loader } from 'lucide-react';\nimport { addItemToCart } from '@/lib/actions/cart.actions';\n\nconst AddToCart = ({ item }: { item: Omit<CartItem, 'cartId'> }) => {\n      const [isPending, startTransition] = useTransition();\n      const router = useRouter();\n      const handleAddToCart = async () => {\n            startTransition(async () => {\n                  // Execute the addItemToCart action\n                  const res = await addItemToCart(item);\n                  if (!res.success) {\n                        toast.error(res.message || \"Something went wrong!!!!\");\n                        return;\n                  }\n                  toast(`${item.name} added to the cart`, {\n                        action: {\n                              label: 'Go to cart',\n                              onClick: () => router.push('/cart'),\n                        },\n                  });\n            })\n      };\n\n      //   return <Button className='w-full' type='button' onClick={handleAddToCart}>\n      //   <Plus />\n      //   Add to cart\n      // </Button>\n      return <div className='text-sm text-primary cursor-pointer' onClick={handleAddToCart}>Add to cart</div>\n};\n\nexport default AddToCart;"],"names":[],"mappings":";;;;;AAGA;AAEA;AACA;AAEA;AARA;;;;;;AAUA,MAAM,YAAY,CAAC,EAAE,IAAI,EAAsC;IACzD,MAAM,CAAC,WAAW,gBAAgB,GAAG,IAAA,sNAAa;IAClD,MAAM,SAAS,IAAA,+IAAS;IACxB,MAAM,kBAAkB;QAClB,gBAAgB;YACV,mCAAmC;YACnC,MAAM,MAAM,MAAM,IAAA,uKAAa,EAAC;YAChC,IAAI,CAAC,IAAI,OAAO,EAAE;gBACZ,iJAAK,CAAC,KAAK,CAAC,IAAI,OAAO,IAAI;gBAC3B;YACN;YACA,IAAA,iJAAK,EAAC,GAAG,KAAK,IAAI,CAAC,kBAAkB,CAAC,EAAE;gBAClC,QAAQ;oBACF,OAAO;oBACP,SAAS,IAAM,OAAO,IAAI,CAAC;gBACjC;YACN;QACN;IACN;IAEA,+EAA+E;IAC/E,aAAa;IACb,gBAAgB;IAChB,YAAY;IACZ,qBAAO,8OAAC;QAAI,WAAU;QAAsC,SAAS;kBAAiB;;;;;;AAC5F;uCAEe","debugId":null}}]
}