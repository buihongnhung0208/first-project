{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/QuocDat/OneDrive/Desktop/first-project/db/prisma.ts"],"sourcesContent":["import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { PrismaNeon } from '@prisma/adapter-neon';\nimport { PrismaClient } from '@prisma/client';\nimport ws from 'ws';\n\n// Sets up WebSocket connections for Neon\nneonConfig.webSocketConstructor = ws;\nconst connectionString = `${process.env.DATABASE_URL}`;\n\n// Creates a connection pool\nconst pool = new Pool({ connectionString });\n\n// Instantiates the Prisma adapter\nconst adapter = new PrismaNeon(pool);\n\n// Extends PrismaClient with custom transformations\nexport const prisma = new PrismaClient({ adapter }).$extends({\n  result: {\n    product: {\n      price: {\n        compute(product) {\n          return product.price.toString();\n        },\n      },\n      rating: {\n        compute(product) {\n          return product.rating.toString();\n        },\n      },\n    },\n  },\n});\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEA,yCAAyC;AACzC,iNAAU,CAAC,oBAAoB,GAAG,sMAAE;AACpC,MAAM,mBAAmB,GAAG,QAAQ,GAAG,CAAC,YAAY,EAAE;AAEtD,4BAA4B;AAC5B,MAAM,OAAO,IAAI,2MAAI,CAAC;IAAE;AAAiB;AAEzC,kCAAkC;AAClC,MAAM,UAAU,IAAI,wNAAU,CAAC;AAGxB,MAAM,SAAS,IAAI,6IAAY,CAAC;IAAE;AAAQ,GAAG,QAAQ,CAAC;IAC3D,QAAQ;QACN,SAAS;YACP,OAAO;gBACL,SAAQ,OAAO;oBACb,OAAO,QAAQ,KAAK,CAAC,QAAQ;gBAC/B;YACF;YACA,QAAQ;gBACN,SAAQ,OAAO;oBACb,OAAO,QAAQ,MAAM,CAAC,QAAQ;gBAChC;YACF;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/QuocDat/OneDrive/Desktop/first-project/auth.ts"],"sourcesContent":["import { compareSync } from 'bcrypt-ts-edge';\nimport type { NextAuthConfig } from 'next-auth';\nimport NextAuth from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\n\nimport { prisma } from '@/db/prisma';\nimport { PrismaAdapter } from '@auth/prisma-adapter';\n\nexport const config = {\n  pages: {\n    signIn: '/sign-in',\n    error: '/sign-in',\n  },\n  session: {\n    strategy: 'jwt',\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    CredentialsProvider({\n      credentials: {\n        email: {\n          type: 'email',\n        },\n        password: { type: 'password' },\n      },\n      async authorize(credentials) {\n        if (credentials == null) return null;\n\n        // Find user in database\n        const user = await prisma.user.findFirst({\n          where: {\n            email: credentials.email as string,\n          },\n        });\n        // Check if user exists and password is correct\n        if (user && user.password) {\n          const isMatch = compareSync(\n            credentials.password as string,\n            user.password\n          );\n          // If password is correct, return user object\n          if (isMatch) {\n            return {\n              id: user.id,\n              name: user.name,\n              email: user.email,\n              role: user.role,\n            };\n          }\n        }\n        // If user doesn't exist or password is incorrect, return null\n        return null;\n      },\n    }),\n  ],\n  callbacks: {\n    async session({ session, user, trigger, token }: any) {\n      // Set the user id on the session\n      session.user.id = token.sub;\n      // If there is an update, set the name on the session\n      if (trigger === 'update') {\n        session.user.name = user.name;\n      }\n      return session;\n    },\n  },\n} satisfies NextAuthConfig;\n\nexport const { handlers, auth, signIn, signOut } = NextAuth(config);\n\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AAEA;AACA;AAAA;AAEA;AACA;;;;;;AAEO,MAAM,SAAS;IACpB,OAAO;QACL,QAAQ;QACR,OAAO;IACT;IACA,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,SAAS,IAAA,kNAAa,EAAC,mKAAM;IAC7B,WAAW;QACT,IAAA,kNAAmB,EAAC;YAClB,aAAa;gBACX,OAAO;oBACL,MAAM;gBACR;gBACA,UAAU;oBAAE,MAAM;gBAAW;YAC/B;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,eAAe,MAAM,OAAO;gBAEhC,wBAAwB;gBACxB,MAAM,OAAO,MAAM,mKAAM,CAAC,IAAI,CAAC,SAAS,CAAC;oBACvC,OAAO;wBACL,OAAO,YAAY,KAAK;oBAC1B;gBACF;gBACA,+CAA+C;gBAC/C,IAAI,QAAQ,KAAK,QAAQ,EAAE;oBACzB,MAAM,UAAU,IAAA,iNAAW,EACzB,YAAY,QAAQ,EACpB,KAAK,QAAQ;oBAEf,6CAA6C;oBAC7C,IAAI,SAAS;wBACX,OAAO;4BACL,IAAI,KAAK,EAAE;4BACX,MAAM,KAAK,IAAI;4BACf,OAAO,KAAK,KAAK;4BACjB,MAAM,KAAK,IAAI;wBACjB;oBACF;gBACF;gBACA,8DAA8D;gBAC9D,OAAO;YACT;QACF;KACD;IACD,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAO;YAClD,iCAAiC;YACjC,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;YAC3B,qDAAqD;YACrD,IAAI,YAAY,UAAU;gBACxB,QAAQ,IAAI,CAAC,IAAI,GAAG,KAAK,IAAI;YAC/B;YACA,OAAO;QACT;IACF;AACF;AAEO,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,IAAA,6MAAQ,EAAC","debugId":null}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/QuocDat/OneDrive/Desktop/first-project/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { handlers } from '@/auth';\nexport const { GET, POST } = handlers;\n\n"],"names":[],"mappings":";;;;;;AAAA;;AACO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,6JAAQ","debugId":null}}]
}